% Copyright (c) 2014 Trustees of Dartmouth College. All rights reserved.

classdef Opts
	% Opts:  Options for causal simulator
	%   TODO: Add detailed comments

	properties
	end

	methods (Static)
		function optcell = getDefaultBaseParams
			optcell = {...
				'numFuncSigs'		, 10		, ...
				'numTimeSteps'		, 1000		, ...
				'numTopComponents'	, 10		, ...
				'numVoxelSigs'		, 500		  ...
			};
		end
		function optcell = getDefaultSignalParams
			optcell = {...
				'auxWPolicy'			, 'beta'	, ...
				... %'auxWPolicy'			, 'not'		, ...
				... %'auxWPolicy'			, 'row'		, ...
				... %'auxWPolicy'			, 'col'		, ...
				... %'auxWPolicy'			, 'det'		, ...
				... %'auxWPolicy'			, 'row:abs'	, ...
				... %'auxWPolicy'			, 'col:abs'	, ...
				... %'auxWPolicy'			, 'det:rel'	, ...
				'auxWWeight'			, 1.0		, ...
				'isDestBalancing'		, false		, ...
				'noisinessForDest'		, 1.0e-6	, ...
				'noisinessForSource'	, 1.0e-6	, ...
				'recurStrength'			, 0.8		  ...
			};
		end
		function optcell = getDefaultSimParams
			optcell = {...
				'iterations'		, 1			, ...
				'maxWOnes'			, 4			, ...
				'outlierPercentage'	, 5			, ...
				... %'pcaPolicy'			, 'runPCA'	, ...
				'pcaPolicy'			, 'skipPCA'	, ...
				'rngSeedBase'		, 0			, ...
				'voxelFreedom'		, 1.000		  ...
			};
		end
		function [opt,optcell] = getOptDefaults
			baseParams = Opts.getDefaultBaseParams;
			signalParams = Opts.getDefaultSignalParams;
			simParams = Opts.getDefaultSimParams;

			optcell = { ...
				baseParams{:} ...
				signalParams{:} ...
				simParams{:} ...
			}; %#ok
			opt = struct(optcell{:});
		end
		function [opt,optcell] = getOpts(optvar)
			if isstruct(optvar)
				optvar = opt2cell(optvar);
			end
			overriddenKeys = optvar(1:2:end);
			if ~all(cellfun(@(x) ischar(x), overriddenKeys))
				error('Malformed options variable');
			end
			[~,defaultsAsCellArray] = Opts.getOptDefaults;
			validKeys = defaultsAsCellArray(1:2:end);
			if ~all(ismember(overriddenKeys,validKeys))
				error('Invalid option name');
			end
			opt = ParseArgs(optvar,defaultsAsCellArray{:});
			optcell = opt2cell(opt);
		end
	end
end
