function h = Plot(obj,varargin)
% subject.assess.base.Plot
% 
% Description:	plot the results of the assessment
% 
% Syntax: h = obj.Plot(<options>)
% 
% In:
%	<options>:
%		performance:	(true) true to plot the subject performance
%		ability:		(true) true to plot the ability estimate as a function
%						of probe number
%		steepness:		(true) true to plot the steepness estimate as a function
%						of probe number
%		rmse:			(true) true to plot the rmse as a function of probe
%						number
%		r2:				(true) true to plot the r^2 as a function of probe
%						number
% 
% Out:
%	h	- a struct of plot handles
% 
% Updated:	2015-12-02
% Copyright 2015 Alex Schlegel (schlegel@gmail.com). This work is licensed
% under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported
% License.

%parse the inputs
	opt	= ParseArgs(varargin,...
			'performance'	, true	, ...
			'ability'		, true	, ...
			'steepness'		, true	, ...
			'rmse'			, true	, ...
			'r2'			, true	  ...
	);

h	= struct;

if opt.performance
	d	= reshape(obj.history.d,[],1);
	f	= reshape(100*obj.history.f,[],1);
	n	= reshape(obj.history.n,[],1);
	
	fEstimate	= 100*weibull(1-d,1-obj.ability,obj.steepness,0,obj.chance,obj.target);
	
	nSample	= numel(d);
	
	col		= GetPlotColors(2);
	col		= [repmat(col(1,:),[nSample 1]); col(2,:)];
	
	dSep	= num2cell(d);
	fSep	= num2cell(f);
	
	cLineStyle	= [repmat({'none'},[nSample 1]); '-'];
	cMarker		= [repmat({'.'},[nSample 1]); 'none'];
	markerSize	= [MapValue(n,0,max(n),10,80); 0];
	
	h.performance	= alexplot([dSep; d],[fSep; fEstimate],...
						'title'			, 'performance'	, ...
						'xlabel'		, 'd'			, ...
						'ylabel'		, '% correct'	, ...
						'xmin'			, 0				, ...
						'xmax'			, 1				, ...
						'ymin'			, 0				, ...
						'ymax'			, 100			, ...
						'color'			, col			, ...
						'linestyle'		, cLineStyle	, ...
						'marker'		, cMarker		, ...
						'markersize'	, 20			, ...
						'type'			, 'line'		  ...
						);
	
	for kS=1:nSample
		set(h.performance.hP(kS),'MarkerSize',markerSize(kS));
	end
end

if opt.ability || opt.steepness || opt.rmse || opt.r2
	hMulti	= {};
	
	nPlot	= opt.ability + opt.steepness + opt.rmse + opt.r2;
	hFigure	= switch2(nPlot,1,[],2,300,3,250,4,200);
	
	nProbe	= numel(obj.history.record);
	kProbe	= (1:nProbe)';
	
	if opt.ability
		ability	= reshape([obj.history.record.ability],[],1);
		
		h.ability	= alexplot(kProbe,ability,...
						'title'			, 'psychometric fit'	, ...
						'xlabel'		, 'probe'				, ...
						'ylabel'		, 'ability estimate'	, ...
						'ymin'			, 0						, ...
						'ymax'			, 1						, ...
						'linewidth'		, 1						, ...
						'h'				, hFigure				, ...
						'type'			, 'line'				  ...
						);
		
		hMulti{end+1}	= h.ability;
	end
	
	if opt.steepness
		steepness	= reshape([obj.history.record.steepness],[],1);
		
		h.steepness	= alexplot(kProbe,steepness,...
						'xlabel'		, 'probe'		, ...
						'ylabel'		, 'steepness'	, ...
						'linewidth'		, 1				, ...
						'h'				, hFigure		, ...
						'type'			, 'line'		  ...
						);
		
		hMulti{end+1}	= h.steepness;
	end
	
	if opt.rmse
		rmse	= reshape([obj.history.record.rmse],[],1);
		
		h.rmse	= alexplot(kProbe,rmse,...
					'xlabel'		, 'probe'	, ...
					'ylabel'		, 'RMSE'	, ...
					'ymin'			, 0			, ...
					'ymax'			, 1			, ...
					'linewidth'		, 1			, ...
					'h'				, hFigure	, ...
					'type'			, 'line'	  ...
					);
		
		hMulti{end+1}	= h.rmse;
	end
	
	if opt.r2
		r2	= reshape([obj.history.record.r2],[],1);
		
		h.r2	= alexplot(kProbe,r2,...
					'xlabel'		, 'probe'	, ...
					'ylabel'		, 'r^2'		, ...
					'ymin'			, 0			, ...
					'ymax'			, 1			, ...
					'linewidth'		, 1			, ...
					'h'				, hFigure	, ...
					'type'			, 'line'	  ...
					);
		
		hMulti{end+1}	= h.r2;
	end
	
	if numel(hMulti)>1
		h.combined	= multiplot(reshape(hMulti,[],1),...
						'label'		, false	, ...
						'spacer'	, false	  ...
						);
	end
end
