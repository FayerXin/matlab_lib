classdef Keyboard < PTB.Device.Input
% PTB.Device.Input.Keyboard
% 
% Description:	keyboard input device
% 
% Syntax:	key = PTB.Device.Input.Keyboard(parent)
% 
% 			subfunctions:
% 				Start(<options>):	start the object
%				End:				end the object
%				Down:				check to see if a key is down
%				DownOnce:			check to see if a button is down, only
%									returning true once per press
%				Pressed:			check to see if a key was pressed
%				State:				get the state of the keyboard
%				Get:				get the state indices associated with a named
%									button
%				Set:				set the state indices associated with a named
%									button
%				SetBase:			set the base state of the keyboard
%				key2char:			get the character of a key given its state
%									index
% 
% In:
%	parent	- the parent object
% 	<options>:
%		input_scheme:	('lr') the input scheme, to determine preset mappings.
%						one of the following:
%							lr:
%									left:	key_left
%									right:	key_right
%							lrud:
%									left:	key_left
%									right:	key_right
%									up:		key_up
%									down:	key_down
% Updated: 2012-01-11
% Copyright 2011 Alex Schlegel (schlegel@gmail.com).  This work is licensed
% under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported
% License.
	
	%PUBLIC METHODS------------------------------------------------------------%
	methods
		%----------------------------------------------------------------------%
		function key = Keyboard(parent)
			key	= key@PTB.Device.Input(parent,'keyboard');
			
			cKey	= cellfun(@(x) lower(x),KbName(1:255),'UniformOutput',false);
			kKey	= find(~cellfun(@isempty,cKey));
			cKey	= cellfun(@(x) str2fieldname(['key_' x]),cKey(kKey),'UniformOutput',false);
			
			[cKey,kUnique]	= unique(cKey);
			kKey			= kKey(kUnique);
			
			key.p_default_name	= cKey;
			key.p_default_index	= kKey;
			
			key.p_scheme			=	{
											'lr'	{
														{'left'		'key_left'	[]}
														{'right'	'key_right'	[]}
													}
											'lrud'	{
														{'left'		'key_left'	[]}
														{'right'	'key_right'	[]}
														{'up'		'key_up'	[]}
														{'down'		'key_down'	[]}
													}
										};
			key.p_scheme_default	= 'lr';
		end
		%----------------------------------------------------------------------%
		function Start(key,varargin)
		%Keyboard start function
			Start@PTB.Device.Input(key,varargin{:});
			
			%add some presets
				key.Set('shift',{'key_shift_l','key_shift_r'});
				key.Set('control',{'key_control_l','key_control_r'});
				key.Set('alt',{'key_alt_l','key_alt_r'});
		end
		%----------------------------------------------------------------------%
	end
	%PUBLIC METHODS------------------------------------------------------------%
end
