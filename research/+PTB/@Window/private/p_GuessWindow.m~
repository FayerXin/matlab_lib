function rWindowed = p_GuessWindowed(varargin)
% PTB.Window.p_GuessWindowed
% 
% Description:	guess the 'windowed' option to PTB.Window.Open
% 
% Syntax:	rWindowed = p_GuessWindowed(<options>)
% 
% In:
% 	<options>:
%		full:	(true) true/false to specify whether or not the display should
%				be full screen on a single-monitor display
%		auxpos:	('right') 'left' or 'right' to specify the physical position of
%				the auxiliary monitor
% 
% Out:
% 	rWindowed	- a guess for the 'windowed' option to PTB.Window.Open
% 
% Updated: 2011-12-10
% Copyright 2011 Alex Schlegel (schlegel@gmail.com).  All Rights Reserved.
opt	= ParseArgsOpt(varargin,...
		'full'		, true		, ...
		'auxpos'	, 'right'	  ...
		);

bLeft	= isequal(lower(opt.auxpos),'left');

[nMonitor,resMonitor,pMonitor]	= GetMonitorInfo;
nScreen							= p_NumScreens;

if nMonitor==nScreen
	if nMonitor>1
	%we have multiple correctly-idenfitied monitors
		rWindowed	= false;
	else
	%just one monitor
		rWindowed	= ~opt.full;
	end
else
%something funky, like unix
	
end


if nMonitor>1
	rWindowed	= false;
elseif ~isunix
	rWindowed	= ~opt.full;
else
	%there may be two monitors on one screen, in which case we may see the
	%resolution as some combination of standard resolutions stacked horizontally
		resCheck	=	[
							1920	1080
							1600	1200
							1600	900
							1280	1024
							1024	768
							800		600
						];
		nCheck		= size(resCheck,1);
		
		
		
		bMulti	= any(cellfun(@(r) isequal(resMonitor,[2*r(1) r(2)]),resCheck));
	
	if bMulti
		sWindow		= [resMonitor(1)/2 resMonitor(2)];
		ltWindow	= conditional(bLeft,[0 0],[sWindow(1)+1 0]);
		
		rWindowed	= [ltWindow ltWindow+sWindow];
	else
		rWindowed	= ~opt.full;
	end
end
