function x = sndFunctionEval(sF,varargin)
% sndFunctionEval
% 
% Description:	evaluate a function defined with sndFunctionDefine
% 
% Syntax:	x = sndFunctionEval(sF,<inputs>)
% 
% In:
% 	sF			- the function struct returned by sndFunctionDefine
%	<inputs>	- the inputs to the function
% 
% Out:
% 	x	- the result of the function call
% 
% Updated: 2010-11-24
% Copyright 2010 Alex Schlegel (schlegel@gmail.com).  All Rights Reserved.

switch sF.combine
	case 'add'
		x		= cellfun(@(x,y) EvalOne(x,y,varargin{:}),sF.f,sF.nInput,'UniformOutput',false);
		[x,n]	= stack(x{:});
		x		= sum(x,n);
	case 'mult'
		x		= cellfun(@(x,y) EvalOne(x,y,varargin{:}),sF.f,sF.nInput,'UniformOutput',false);
		[x,n]	= stack(x{:});
		x		= prod(x,n);
	case 'combine'
		nFunc	= numel(sF.f);
		if nFunc>0
			x	= EvalOne(sF.f{1},sF.nInput{1},varargin{:});
			for kF=1:nFunc
				x	= EvalOne(sF.f{kF},sF.nInput{kF},x,varargin{2:end});
			end
		else
			x	= [];
		end
end

%------------------------------------------------------------------------------%
function x = EvalOne(f,nInput,varargin)
	x	= f(varargin{1:nInput});
end
%------------------------------------------------------------------------------%

end