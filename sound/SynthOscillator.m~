classdef SynthOscillator
% SynthOscillator
% 
% Description:	
% 
% Syntax:	synO = SynthOscillator([xSample]='sine',<options>)
%			x = synO(t,<options>)		: sample at time t
%			x = synO(t1,t2,<options>)	: sample from time t1 to t2
% 
% 			subfunctions:
%				b = save(strPathOut,t,<options>)
% 				b = save(strPathOut,[t1]=0,[t2]=<end>,<options>)
%
% 			properties:
%				sample (get/set) 
%				rate (get/set)
%				frequency (get/set)
% 
% In:
% 	xSample	- a 1D sample array, a function that takes a time, in seconds, as
%			  input and returns a sample, the path to an audio file, or one of
%			  the following presets:
%				sine
%				sawtooth
%				square
%	<options>:
%		rate:		(44100) the sampling rate of the sample, if a sample array
%					was specified
%		frequency:	(<determine>) the frequency of the sample
% 
% Updated: 2011-11-25
% Copyright 2011 Alex Schlegel (schlegel@gmail.com).  All Rights Reserved.

	%PUBLIC PROPERTIES---------------------------------------------------------%
	properties
		sample;
		rate;
		frequency;
	end
	%PUBLIC PROPERTIES---------------------------------------------------------%
	
	
	%PRIVATE PROPERTIES--------------------------------------------------------%
	properties (SetAccess=private, GetAccess=private)
		p_t;	%timepoint of each sample
		p_f;	%rendering function
	end
	%PRIVATE PROPERTIES--------------------------------------------------------%
	
	
	%PROPERTY GET/SET----------------------------------------------------------%
	methods
		function synO = set.sample(synO,x)
			if ischar(x)
				synO.sample		= lower(x);
				synO.frequency	= unless(synO.frequency,440);
				
				switch lower(x)
					case 'sine'
						synO.p_f	= @(t) sin(2*pi*t*synO.frequency);
					case 'sawtooth'
						synO.p_f	= @(t) 2*mod(t*synO.frequency,1)-1;
					case 'square'
						synO.p_f	= @(t) 2*double(mod(t*synO.frequency,1)>0.5)-1;
					otherwise
						error(['"' tostring(x) '" is not a valid sample preset.']);
				end
			elseif isnumeric(x)
				synO.sample	= reshape(x,[],1);
				synO.p_t	= reshape(k2t(1:numel(synO.sample),synO.rate),[],1);
				
				if ~isempty(synO.sample)
					synO.p_f	= @(t) interp1(synO.p_t,synO.sample,mod(t,synO.p_t(end)+eps),'pchip');
				else
					synO.p_f	= @(t) zeros(size(t));
				end
			elseif isa(xSample,'function_handle')
				synO.p_f	= x;
			else
				error('Invalid sample.');
			end
		end
	end
	%PROPERTY GET/SET----------------------------------------------------------%
	
	
	%PUBLIC METHODS------------------------------------------------------------%
	methods
		function synO = SynthOscillator(varargin)
			[xSample,opt]	= ParseArgsOpt(varargin,'sine',...
								'rate'		, 44100	, ...
								'frequency'	, []	  ...
								);
			
			synO.rate		= opt.rate;
			synO.frequency	= opt.frequency;
			synO.sample		= xSample;
			
			if isempty(synO.frequency)
			%determine the frequency of the sample
				synO.frequency	= 1;
				x				= feval(synO,0,1);
				synO.frequency	= DetectPitch(x,synO.rate);
			end
		end
		function b = save(synO,strPathOut,varargin)
			[t1,t2,opt]	= ParseArgsOpt(varargin,[],[],...
							'rate'	, synO.rate	  ...
							);
			
			%generate the sample
				x	= synO.feval(varargin{:},'interval',true);
			%do we need an intermediate wave file?
				strExt			= PathGetExt(strPathOut);
				bIntermediate	= ~isequal(lower(strExt),'wav');
			%save the file
				strPathOutFirst	= conditional(bIntermediate,GetTempFile('ext','wav'),strPathOut);
				
				warning('off','MATLAB:wavwrite:dataClipped');
				
				wavwrite(x,opt.rate,strPathOutFirst);
				
				b	= true;
			%convert and delete the intermediate if necessary
				if bIntermediate
					b	= ConvertAudio(strPathOutFirst,strPathOut,'silent',true);
					
					delete(strPathOutFirst);
				end
			
			b	= b & FileExists(strPathOut);
		end
	end
	%PUBLIC METHODS------------------------------------------------------------%
	
	
	%OVERLOADED FUNCTIONS------------------------------------------------------%
	methods
		function [x,t] = feval(synO,varargin)
			[tStart,tEnd,opt]	= ParseArgsOpt(varargin,0,[],...
									'interval'	, false				, ...
									'rate'		, synO.rate			, ...
									'frequency'	, synO.frequency	  ...
									);
			
			if isempty(tEnd) && (~opt.interval || ~isscalar(tStart))
				t	= tStart;
			else
				if isempty(tEnd)
					if isnumeric(synO.sample)
						tEnd	= k2t(numel(synO.sample)+1,synO.rate);
					else
						tEnd	= 1;
					end
				end
				
				t	= reshape(GetInterval(tStart,tEnd-1/opt.rate,1/opt.rate,'stepsize'),[],1);
			end
			
			x	= synO.p_f(t*opt.frequency/synO.frequency);
		end
		function varargout = subsref(synO,s)
			switch s(1).type
				case '()'
					[varargout{1:nargout}]	= feval(synO,s(1).subs{:});
				case '.'
					if numel(s)>1
						[varargout{1:nargout}]	= synO.(s(1).subs)(s(2).subs{:});
					else
						[varargout{1:nargout}]	= synO.(s(1).subs);
					end
				otherwise
					error('Invalid syntax.');
			end
		end
	end
	%OVERLOADED FUNCTIONS------------------------------------------------------%
	
	
	%PRIVATE METHODS-----------------------------------------------------------%
	methods (Access=private)
		
	end
	%PRIVATE METHODS-----------------------------------------------------------%
	
end